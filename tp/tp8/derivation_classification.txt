// Une macro qui classifie les images via la dérivation de celle-ci

macro "derivation" {

	// OPEN THE IMAGE
	open("128_y.bmp");
	image_ID = getImageID();

	// CONVERT THE IMAGE IN 32-bits
	run("Conversions...", " ");
	run("32-bit");

	// GET THE SIZE OF THE IMAGE
	W = getWidth();
	H = getHeight();

	// CONVOLVE WITH SOBEL MASK ON Y
	run("Duplicate...", "title=ConvolutionY");
	convolution_Y_ID = getImageID();
	run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n] normalize");

	selectImage (image_ID);

	// CONVOLVE WITH SOBEL MASK ON X
	run("Duplicate...", "title=ConvolutionX");
	convolution_X_ID = getImageID();
	run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize");
	
	selectImage (image_ID);
	
	setBatchMode(true);

	// DISTANCE IMAGE
	run("Duplicate...", "title=Distance");
	distance_ID = getImageID();
	
	// FOR ALL OF THE PIXELS
	for (j=0; j<H; j++) 
	{
		for (i=0; i<W; i++) 
		{
			// GET THE 
			selectImage(convolution_X_ID);
			px = getPixel(i,j);

			selectImage(convolution_Y_ID);
			py = getPixel(i,j);

			// CALCULATE THE DISTANCE
			distance = atan2(py,px)*180/PI;
			
			// NOMALIZE IT 
			normalized_distance = sqrt(distance* distance);

			selectImage(distance_ID);
			
			// SET THE PIXEL IN THE IMAGE DISTANCE
			// WITH THE CALCULATED DISTANCE
			setPixel(i,j, normalized_distance);
		}
	}

	setBatchMode(false);

	// GET THE DATA ON THE IMAGE DISTANCE
	getRawStatistics(nPixels, mean, min, max, std, histogram)

	// PRINT VALUES
	print("max =", max);
	print("min =", min);
	print("mean =", mean);
	print("std =", std);

}
