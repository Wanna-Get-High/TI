// Calcul de la norme du gradient par masque de Sobel
requires("1.41i");

setBatchMode(true);

// OUVRE L'IMAGE
open("../tp9/lighthouse_8bits.png");
image_ID = getImageID();

// CONVERTIE L'IMAGE EN 32-bits
run("Conversions...", " ");
run("32-bit");

// CONVOLUE AVEC LE MASQUE DE SOBEL EN Y
run("Duplicate...", "title=ConvolutionY");
convolution_Y_ID = getImageID();
run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n] normalize");

selectImage (image_ID);

// CONVOLUE AVEC LE MASQUE DE SOBEL EN X
run("Duplicate...", "title=ConvolutionX");
convolution_X_ID = getImageID();
run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize");
	
selectImage (image_ID);

// IMAGE ORIENTATION
run("Duplicate...", "title=Orientation");
orientation_ID = getImageID();

selectImage (image_ID);

// IMAGE NORME
run("Duplicate...", "title=Norme");
norme_ID = getImageID();

// TAILLE DE L'IMAGE
W = getWidth();
H = getHeight();

// CALCUL DE LA NORME DU GRADIENT AINSI QUE L'ORIENTATION 
for (j=0; j<H; j++) 
{
	for (i=0; i<W; i++) 
	{
		selectImage(convolution_X_ID);
		px = getPixel(i,j);

		selectImage(convolution_Y_ID);
		py = getPixel(i,j);

		orientation = atan2(py,px)*180/PI;
		norme = sqrt(px*px + py*py);

		selectImage(orientation_ID);
		setPixel(i,j, orientation);

		selectImage(norme_ID);
		setPixel(i,j, norme);
	}
}

// Histogramme cumulŽ
selectImage(norme_ID);

getRawStatistics(surf, moy, min, max, std, h); // h[0..255] <-> histo
hc=newArray(256);
hc[0]=h[0];
for (i=1;i< h.length;i++) {
    hc[i] = hc[i-1]+h[i] ;
}
Plot.create("Histogramme cumulŽ de "+getTitle, "Niveau", "hc", hc);
Plot.show();

selectImage(norme_ID);

// CALCUL DES MAXIMA LOCAUX DE LA NORME
run("Duplicate...", "title=Norme_Maxima_Locaux");
normeMaxLocaux_ID = getImageID();

for (j=0; j<H; j++) 
{
	for (i=0; i<W; i++) 
	{
		// ON RECUPERE L'ORIENTATION DU PIXEL COURANT
		selectImage(orientation_ID);
		pOrient = getPixel(i,j);

		pOrient = sqrt(pOrient* pOrient); 
		
		// ON SELECTIONNE LES INDICES NECESSAIRE POUR LA COMPARAISON
		// DES MAXIMA LOCAUX PAR RAPPORT A LA DIRECTION 
		p2_x = i;
		p2_y = j;
		p3_x = i;
		p3_y = j;

		if ( pOrient < 22.5) {
			p2_x = i-1;
			p3_x = i+1;
		} else if (pOrient >= 22.5 && pOrient < 67.5) {
			p2_x = i-1;
			p2_y = j-1;
			p3_x = i+1;
			p3_y = j+1;
		} else if (pOrient >= 67.5 && pOrient < 112.5) {
			p2_y = j-1;
			p3_y = j+1;
		} else {
			p2_x = i-1;
			p2_y = j+1;
			p3_x = i+1;
			p3_y = j-1;
		}

		// ON SELECTIONNE LES PIXELS DE LA NORME
		selectImage(norme_ID);

		p1 = getPixel(i,j);
		p2 = getPixel(p2_x, p2_y);
		p3 = getPixel(p3_x, p3_y);


		// ON ECRIT LES PIXELS DANS LA NOUVELLE IMAGE
		// ON CONSERVE QUE LE MAXIMA LOCAL
		selectImage(normeMaxLocaux_ID);

		if (p1 > p2 && p1 > p3) {
			setPixel(p2_x, p2_y,0);
			setPixel(p3_x, p3_y,0);
		} else if (p2 > p1 && p2 > p3) {
			setPixel(i, j,0);
			setPixel(p3_x, p3_y,0);
		} else {
			setPixel(i, j,0);
			setPixel(p2_x, p2_y,0);
		}
	}
}

setBatchMode("exit and display");
